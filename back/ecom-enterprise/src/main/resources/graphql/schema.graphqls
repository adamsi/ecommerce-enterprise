#query
type Query {
    me: User
    categories: [Category]
    products: [Product]
    productBySlug(slug:String!): Product
    clientConfig(key:String!):ClientConfig
}

scalar Upload

#muation
type Mutation {
    addCategory(input: CategoryInput!, image: Upload): Category
    deleteCategory(id: ID!): Category
    addProduct(input: ProductInput!, image: Upload, thumbnails: [Upload]): Product
    deleteProduct(id: ID!): Product
    editClientConfig(input: ClientConfigInput!, images: [Upload]): ClientConfig
}

#types
type User {
    username: String
    email: String
    picture: String
    role:Role
}

enum Role {
    ADMIN, USER
}

type Category {
    id: ID!
    name: String!
    image: String
}

type Product {
    id: ID
    slug: String
    title: String
    price: Float
    materials: [String]
    thumbnails: [String]
    sizes: [String]
    image: String
    description: String
    stockQuantity: Int
    createdAt: String
    category: Category
}

type ClientConfig {
    key: String
    images: [String]
    contents: [String]
}

#inputs
input CategoryInput {
    id: String
    name: String!
    image: String
}

input ProductInput {
    id: String
    title: String!
    description: String
    price: Float!
    materials: [String]
    sizes: [String]
    stockQuantity: Int
    categoryId: ID!
    image: String
    thumbnails: [String]
}

input OrderInput {
    totalAmount: Float!
    orderItems: [OrderItemInput]
}

input OrderItemInput {
    productId: String!
    quantity: Int!
    priceAtPurchase: Float!
}

input ClientConfigInput {
   key: String!
   contents: [String]
   images: [String]
}

